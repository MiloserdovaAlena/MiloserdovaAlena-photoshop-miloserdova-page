import { useMemo, useRef } from 'react';
import { BlendMode } from '../utils/blending';

const panelStyle = { width: '300px', height: 'calc(100vh - 80px)', borderLeft: '1px solid #444', padding: '8px', color: '#fff', background: '#2b2b2b', boxSizing: 'border-box', overflow: 'hidden', display: 'flex', flexDirection: 'column', gap: '8px' };
const headerStyle = { display: 'flex', gap: '8px' };
const listStyle = { overflow: 'auto', flex: 1, minHeight: 0 };
const itemStyle = (active) => ({ border: active ? '2px solid #4da3ff' : '1px solid #555', marginBottom: '8px', padding: '8px', background: '#1f1f1f', borderRadius: '4px', cursor: 'pointer' });
const rowStyle = { display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: '6px' };
const previewStyle = { width: '64px', height: '64px', background: 'transparent', border: '1px solid #444', imageRendering: 'pixelated' };
const labelStyle = { fontSize: '12px', color: '#ddd' };
const selectStyle = { background: '#2b2b2b', color: '#fff', border: '1px solid #555', borderRadius: '4px' };
const rangeStyle = { width: '100%' };

const blendModeInfo = {
  [BlendMode.NORMAL]: 'Normal: –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö –Ω–∏–∂–Ω–µ–≥–æ, —É—á–∏—Ç—ã–≤–∞—è –∞–ª—å—Ñ—É.',
  [BlendMode.MULTIPLY]: 'Multiply: —É–º–Ω–æ–∂–∞–µ—Ç —Ü–≤–µ—Ç–∞, –∑–∞—Ç–µ–º–Ω—è–µ—Ç –∏—Ç–æ–≥.',
  [BlendMode.SCREEN]: 'Screen: –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, —É–º–Ω–æ–∂–∞–µ—Ç, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ ‚Äî –æ—Å–≤–µ—Ç–ª—è–µ—Ç.',
  [BlendMode.OVERLAY]: 'Overlay: —Å–æ—á–µ—Ç–∞–µ—Ç multiply –∏ screen –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è—Ä–∫–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ.',
};

export default function LayersPanel({ layers, activeLayerId, onSetActive, onAddLayer, onRemoveLayer, onToggleVisible, onToggleAlphaVisible, onChangeOpacity, onChangeBlendMode, onMoveUp, onMoveDown, onDeleteAlpha, onAddImage, onAddColor }) {
  const fileInputRef = useRef(null);

  return (
    <div style={panelStyle} aria-label="–û–∫–Ω–æ —Å–ª–æ–µ–≤">
      <div style={headerStyle}>
        <button onClick={() => onAddImage?.()} disabled={layers.length >= 2}>–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
        <button onClick={() => onAddColor?.()} disabled={layers.length >= 2}>–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç</button>
      </div>

      <div style={listStyle}>
        {layers.slice().reverse().map((layer) => (
          <div key={layer.id} style={itemStyle(layer.id === activeLayerId)} onClick={() => onSetActive(layer.id)}>
            <div style={rowStyle}>
              <strong style={{ color: '#fff' }}>{layer.name}</strong>
              <div>
                <button onClick={(e) => { e.stopPropagation(); onMoveUp(layer.id); }} title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">‚ñ≤</button>
                <button onClick={(e) => { e.stopPropagation(); onMoveDown(layer.id); }} title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">‚ñº</button>
                <button onClick={(e) => { e.stopPropagation(); onRemoveLayer(layer.id); }} title="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π">üóë</button>
              </div>
            </div>

            <div style={{ display: 'flex', gap: '8px', marginTop: '6px' }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                <span style={labelStyle}>–ü—Ä–µ–≤—å—é</span>
                <canvas width={64} height={64} style={previewStyle} ref={(c) => {
                  if (!c) return;
                  const ctx = c.getContext('2d');
                  const { width, height, data } = layer;
                  const tmp = new ImageData(data, width, height);
                  const off = document.createElement('canvas');
                  off.width = width; off.height = height;
                  const octx = off.getContext('2d');
                  octx.putImageData(tmp, 0, 0);
                  ctx.clearRect(0, 0, 64, 64);
                  const scale = Math.min(64 / width, 64 / height);
                  const w = Math.round(width * scale);
                  const h = Math.round(height * scale);
                  const x = Math.floor((64 - w) / 2);
                  const y = Math.floor((64 - h) / 2);
                  ctx.imageSmoothingEnabled = true;
                  ctx.imageSmoothingQuality = 'high';
                  ctx.drawImage(off, 0, 0, width, height, x, y, w, h);
                }} />
              </div>

              <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                <span style={labelStyle}>–ê–ª—å—Ñ–∞</span>
                <canvas width={64} height={64} style={previewStyle} title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞" ref={(c) => {
                  if (!c) return;
                  const ctx = c.getContext('2d');
                  const { width, height, data } = layer;
                  const alphaImg = ctx.createImageData(width, height);
                  for (let i = 0; i < width * height; i++) {
                    const ai = i * 4;
                    const a = (layer.alphaVisible === false ? 255 : data[ai + 3]);
                    alphaImg.data[ai + 0] = a;
                    alphaImg.data[ai + 1] = a;
                    alphaImg.data[ai + 2] = a;
                    alphaImg.data[ai + 3] = 255;
                  }
                  const off = document.createElement('canvas');
                  off.width = width; off.height = height;
                  const octx = off.getContext('2d');
                  octx.putImageData(alphaImg, 0, 0);
                  ctx.clearRect(0, 0, 64, 64);
                  const scale = Math.min(64 / width, 64 / height);
                  const w = Math.round(width * scale);
                  const h = Math.round(height * scale);
                  const x = Math.floor((64 - w) / 2);
                  const y = Math.floor((64 - h) / 2);
                  ctx.imageSmoothingEnabled = true;
                  ctx.imageSmoothingQuality = 'high';
                  ctx.drawImage(off, 0, 0, width, height, x, y, w, h);
                }} />
              </div>

              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', flex: 1 }}>
                <div style={rowStyle}>
                  <label style={labelStyle}>–í–∏–¥–∏–º–æ—Å—Ç—å</label>
                  <input type="checkbox" checked={layer.visible} onChange={(e) => onToggleVisible(layer.id, e.target.checked)} />
                </div>

                <div style={rowStyle}>
                  <label style={labelStyle}>–ê–ª—å—Ñ–∞</label>
                  <input type="checkbox" checked={layer.alphaVisible !== false} onChange={(e) => onToggleAlphaVisible(layer.id, e.target.checked)} />
                  <button onClick={(e) => { e.stopPropagation(); onDeleteAlpha(layer.id); }} title="–£–¥–∞–ª–∏—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª">‚úñ</button>
                </div>

                <div>
                  <label style={labelStyle}>–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {Math.round((layer.opacity ?? 1) * 100)}%</label>
                  <input style={rangeStyle} type="range" min={0} max={100} value={Math.round((layer.opacity ?? 1) * 100)} onChange={(e) => onChangeOpacity(layer.id, Number(e.target.value) / 100)} />
                </div>

                <div style={rowStyle}>
                  <label style={labelStyle}>–†–µ–∂–∏–º</label>
                  <select style={selectStyle} value={layer.blendMode} onChange={(e) => onChangeBlendMode(layer.id, e.target.value)} title={blendModeInfo[layer.blendMode] || ''}>
                    {Object.values(BlendMode).map((m) => (
                      <option key={m} value={m} title={blendModeInfo[m]}>{m}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <p style={{ fontSize: '12px', color: '#bbb', margin: 0 }}>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ 2 —Å–ª–æ–µ–≤.</p>
    </div>
  );
} 